// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {
        kotlin_version = '1.4.0'
        appcompat_version = '1.2.0'
        recyclerview_version = '1.1.0'
        okhttp3_version = '4.8.1'
        junit_version = '4.13'
        runner_version = '1.3.0'
        espresso_version = '3.3.0'
        retrofit_version = '2.9.0'
        rxJava_version = '2.2.19'
        rxAndroid_version = '2.1.1'
        rxKotlin_version = '2.0.0'
        dagger_version = '2.16'
        support_design_version = '28.0.0'
        google_material_version = '1.1.0'
        lifecycle_version = '2.0.0'
        constraint_layout_version = '2.0.1'
        core_ktx_version = '1.3.1'
        glide_version = '4.11.0'
        kotlin_mockito_version = '1.6.0'
        assertj_core_version = '3.16.1'
        coordinator_layout_version = '1.1.0'

        kotlinStdLib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        core_ktx = "androidx.core:core-ktx:$core_ktx_version"
        appcompat = "androidx.appcompat:appcompat:$appcompat_version"

        recyclerview = "androidx.recyclerview:recyclerview:$recyclerview_version"
        support_design = "com.android.support:design:$support_design_version"
        google_material = "com.google.android.material:material:$google_material_version"
        constraint_layout = "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
        coordinator_layout = "androidx.coordinatorlayout:coordinatorlayout:$coordinator_layout_version"

        okhttp3 = "com.squareup.okhttp3:okhttp:$okhttp3_version"

        retrofit = "com.squareup.retrofit2:retrofit:$retrofit_version"
        retrofit_gson = "com.squareup.retrofit2:converter-gson:$retrofit_version"
        retrofit_rx_adapter = "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

        rxJava = "io.reactivex.rxjava2:rxjava:$rxJava_version"
        rxAndroid = "io.reactivex.rxjava2:rxandroid:$rxAndroid_version"
        rxKotlin = "io.reactivex.rxjava2:rxkotlin:$rxKotlin_version"

        lifecycle = "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
        lifecycle_compiler = "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

        glide = "com.github.bumptech.glide:glide:$glide_version"
        glide_compiler = "com.github.bumptech.glide:compiler:$glide_version"

        dagger = "com.google.dagger:dagger:$dagger_version"
        dagger_android_support = "com.google.dagger:dagger-android-support:$dagger_version"
        dagger_android_processor = "com.google.dagger:dagger-android-processor:$dagger_version"
        dagger_compiler = "com.google.dagger:dagger-compiler:$dagger_version"
        dagger_test = "com.google.dagger:dagger:$dagger_version"
        dagger_compiler_test = "com.google.dagger:dagger-compiler:$dagger_version"

        junit = "junit:junit:$junit_version"
        runner = "androidx.test:runner:$runner_version"
        espresso = "androidx.test.espresso:espresso-core:$espresso_version"
        mockito = "com.nhaarman:mockito-kotlin:$kotlin_mockito_version"
        assertj = "org.assertj:assertj-core:$assertj_core_version"

        daggerDependencies = [dagger, dagger_android_support]
        daggerKaptDependencies = [dagger_android_processor, dagger_compiler]

        androidViewDependencies = [recyclerview, support_design, google_material, constraint_layout, coordinator_layout]
        testDependencies = [junit]
        androidTestDependencies = [runner, espresso]
        rxJavaDependencies = [rxJava, rxAndroid, rxKotlin]
        retrofit = [retrofit, retrofit_gson, retrofit_rx_adapter]
    }

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
